openapi: 3.0.1
info:
  title: Sample REST server
  description: TODO
  version: 1.0.0
servers:
- url: https://example.com
paths:
  /task:
    get:
      summary: Returns a list of all tasks
      responses:
        "200":
          description: A JSON array of task IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
                x-content-type: application/json
    post:
      summary: Create a task
      requestBody:
        description: Task to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body'
      responses:
        "200":
          description: ID of created task
          content:
            application/json:
              schema:
                type: integer
                x-content-type: application/json
  /task/{id}:
    get:
      summary: Get task with specific id
      parameters:
      - name: id
        in: path
        description: The user ID
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
      responses:
        "200":
          description: Task with given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    delete:
      summary: Delete task with specific id
      parameters:
      - name: id
        in: path
        description: The user ID
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
      responses:
        "200":
          description: Task with given id deleted
          content: {}
  /tag/{tagname}:
    get:
      summary: Get tasks with given tag name
      parameters:
      - name: tagname
        in: path
        description: The tag name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A JSON array of task IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
                x-content-type: application/json
  /due/{year}/{month}/{day}:
    get:
      summary: Get tasks with given due date
      parameters:
      - name: year
        in: path
        description: The year
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
      - name: month
        in: path
        description: The month
        required: true
        style: simple
        explode: false
        schema:
          maximum: 12
          minimum: 1
          type: integer
      - name: day
        in: path
        description: The day
        required: true
        style: simple
        explode: false
        schema:
          maximum: 31
          minimum: 1
          type: integer
      responses:
        "200":
          description: A JSON array of task IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
                x-content-type: application/json
components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
        text:
          type: string
        tags:
          type: array
          items:
            type: string
        due:
          type: string
          format: date-time
      example:
        due: 2000-01-23T04:56:07.000+00:00
        id: 0
        text: text
        tags:
        - tags
        - tags
    body:
      type: object
      properties:
        text:
          type: string
        tags:
          type: array
          items:
            type: string
        due:
          type: string
          format: date-time
